
[
  {
    "cell_id": 1,
    "title": "Product Program: Scent Diffuser",
    "skills": "Device(ESP8266 MCU), Program(C, HTML) Parts(Atomizer, LED)",
    "pic": "./images/programming/arduino1.png",
    "pic2": "./images/no-photo.png",
    "pic3": "./images/cityofsurrey/Large Mug.JPG",
    "pic4": "./images/cityofsurrey/Surrey Coin.JPG",
    "description": "While a student at Simon Fraser University I worked with a student startup to create a prototype for a app controller scent diffuser. I used and ESP8266 as the controller, this included creating a program so it could be set up as an AP and then recieve network info and flip to connect. Then in normal operation it could recieve REST API requests to control things like the lighting colour and control the diffuser turning on and off. To test this I initially made a simple HTML interface, and later another team member made the app ",
    "visible": true,
    "open": false,
    "position": 1
  },
  {
    "cell_id": 2,
    "title": "Product Program: Security Keypad(MPU Communication)",
    "skills": "Program(NodeJS, Shell, AWS IOT), Protocols(UART,SPI,I2C, MQTT), Devices(Linux Debian MPU) ",
    "pic": "./images/programming/aws1.png",
    "pic2": "./images/no-photo.png",
    "pic3": "./images/cityofsurrey/Large Mug.JPG",
    "pic4": "./images/cityofsurrey/Surrey Coin.JPG",
    "description": "During my time working for a new company called Plasmatic Technologies Inc.; a company that is making an internet connected home security system, I programmed the device to use various forms of communcication. To connect with our apps we used AWS IOT so that required using MQTT messages, we additionally used MQTT in sending data between our programs. UART was used to send information between the MPU and MCU, I2C and SPI were used to control sense and display for a capacitive touch screen and taught me how to make Linux drivers as well. All programs were using NodeJS on a Linux Debian OS.",
    "visible": true,
    "open": false,
    "position": 2
  }
  ,
  {
    "cell_id": 3,
    "title": "Product Program: Security Keypad(MPU Components)",
    "skills": "Devices(Linux Debian MPU), Program(NodeJS, Linux Debian, C, C++), Parts(LED(POV), LCD, Speaker) ",
    "pic": "./images/programming/nodejs1.png",
    "pic2": "./images/no-photo.png",
    "pic3": "./images/cityofsurrey/Large Mug.JPG",
    "pic4": "./images/cityofsurrey/Surrey Coin.JPG",
    "description": "During my time working for a new company called Plasmatic Technologies Inc.; a company that is making an internet connected home security system, there were several components that needed to be programmed in NodeJS. This included the speakers which use PWM and the LCD which has images sent to it using the framebuffer to send over SPI and serves a page made with ReactJS with Xserver. Multiple LEDs that needed to be ran only had a library in C, so I made a NodeJS addon using C/C++.",
    "visible": true,
    "open": false,
    "position": 3
  },
  {
    "cell_id": 4,
    "title": "Product Program: Security Keypad(MCU)",
    "skills": "Devices(TI MCU), Program(C) Parts(Capacitive Touch)  ",
    "pic": "./images/programming/ccs1.jpg",
    "pic2": "./images/no-photo.png",
    "pic3": "./images/cityofsurrey/Large Mug.JPG",
    "pic4": "./images/cityofsurrey/Surrey Coin.JPG",
    "description": "During my time working for a new company called Plasmatic Technologies Inc.; a company that is making an internet connected home security system, I programmed using Code Composer Studio (CCS) got a TI MCU. This MCU was specifically meant to work with capacitive touch buttons, so I programmed for these. I also programmed it to be able to brute force find the installer codes for security systems. For communication between the MCU and MPU we used UART so I programmed it to recieve the messages and interpret them to perform actions. ",
    "visible": true,
    "open": false,
    "position": 1
  },
  {
    "cell_id": 5,
    "title": "Side Project Program: Automatic Scoreboard",
    "skills": "Device(Arduino MCU), Program(C) Parts(LED(POV), IR) ",
    "pic": "./images/programming/arduino1.png",
    "pic2": "./images/no-photo.png",
    "pic3": "./images/cityofsurrey/Large Mug.JPG",
    "pic4": "./images/cityofsurrey/Surrey Coin.JPG",
    "description": "Early on in learning how to use microcontrollers I decided I wanted to try and build a table top hockey that had an automated scoreboard. To do this I used an Arduino 4-digit 7-segment a 1-digit 7-segment display and IR sensors to detect goals. In order to display all of the number on the displays I used a shift register for the 7-segments and programmed a loop of outputs for persistence of vision(POV) so that they could all be shown at the same time. This was programmed in the Arduino IDE .",
    "visible": true,
    "open": false,
    "position": 2
  },
  {
    "cell_id": 6,
    "title": "Side Project Program: Controllable and PID Pulley",
    "skills": "Device(TI MCU), Program(C), Parts(Motor Control(PWM, PID), IR Buttons)",
    "pic": "./images/programming/ccs1.jpg",
    "pic2": "./images/no-photo.png",
    "pic3": "./images/cityofsurrey/Large Mug.JPG",
    "pic4": "./images/cityofsurrey/Surrey Coin.JPG",
    "description": "For a course at SFU we had to complete project with a microcontroller(MCU) that had you use digital I/O, PWM, and a PID. There was the choice to use a setup that was prebuilt, but I chose to built a custom pulley machine. The TI Tiva Series MCU was what I used for this, but I also learned how to use HCS12 DragonBoard MCU. I used PWM for speed control, the digital I/Os for directional control through a motor controller, and programmed the PID make an object stop smoothly in the middle after finding both IR endstops. This was programmed in Code Composer Studio(CCS).",
    "visible": true,
    "open": false,
    "position": 3
  }
]
