
[
 {
    "cell_id": 1,
    "title": "Python (Various Jigs)",
    "skills": "",
    "pic": "./images/programming/python1.jpg",
    "pic2": "./images/no-photo.png",
    "pic3": "./images/cityofsurrey/Large Mug.JPG",
    "pic4": "./images/cityofsurrey/Surrey Coin.JPG",
    "description": "As an engineer at Notifai; a company making enterprise enviromental and air quality sensing solutions, I had to make scripts to allow all the components of our test jigs operate. All of these jigs can be seen in the \"Testing & Jigs\" section of this portfolio webpage. These required using several Python packages(pip) such as UART(often with AT commands), FTDI, QR reading, GPIO, i2c, and more",
    "visible": true,
    "open": false,
    "position": 1
  },
    {
    "cell_id": 2,
    "title": "Bash Script(Various Jigs)",
    "skills": "",
    "pic": "./images/programming/bash1.png",
    "pic2": "./images/no-photo.png",
    "pic3": "./images/cityofsurrey/Large Mug.JPG",
    "pic4": "./images/cityofsurrey/Surrey Coin.JPG",
    "description": "As an engineer at Notifai; a company making enterprise enviromental and air quality sensing solutions, I had to make scripts to allow all the components of our test jigs operate. All of these jigs can be seen in the \"Testing & Jigs\" section of this portfolio webpage. To be able to autostart and select between multiple Python programs on the jigs, as well as print customized error messages, and allow for input options in starting the script. As well to interact with more internal functions of the Raspberry Pi.",
    "visible": true,
    "open": false,
    "position": 2
  },
    {
    "cell_id": 3,
    "title": "Micropython(Pi Pico)",
    "skills": "",
    "pic": "./images/programming/micropython1.jpg",
    "pic2": "./images/no-photo.png",
    "pic3": "./images/cityofsurrey/Large Mug.JPG",
    "pic4": "./images/cityofsurrey/Surrey Coin.JPG",
    "description": "As an engineer at Notifai; a company making enterprise enviromental and air quality sensing solutions, I was tasked with making the firmware for a Pi Pico based board, to this I wrote it in Micropython. To communicate with the components(PM, CO2, TVOC, temperature, humidity, e-paper, neopixels,  and LoRa module) I used UART, SPI and i2c. All of these components required being able to hotplug into the main board, and then display and send data.",
    "visible": true,
    "open": false,
    "position": 3
  },
    {
    "cell_id": 4,
    "title": "IAR C (LED Board)",
    "skills": "",
    "pic": "./images/programming/iar1.png",
    "pic2": "./images/programming/c1.png",
    "pic3": "./images/cityofsurrey/Large Mug.JPG",
    "pic4": "./images/cityofsurrey/Surrey Coin.JPG",
    "description": "As an engineer at Notifai; a company making enterprise enviromental and air quality sensing solutions, I used an STM8S MCU with buttons, an RGB LED, and requiring UART communication. I decide to use IAR IDE for programming the STM8S as it has helpful debugging tools. In my C program I implemented a miniaturized JSON library, for rading the JSON being recieved over UART. For the UART I implemented interupts and buffering for smooth opertaion. A independent watchdog was used to reset when a keep alive message wasn't revieved. Standard GPIO and PWM  functions were used for the buttons and the RGB LED.",
    "visible": true,
    "open": false,
    "position": 1
  },
    {
    "cell_id": 5,
    "title": "GraphQL(App, Demo Pi)",
    "skills": "",
    "pic": "./images/programming/graphqlapollo1.webp",
    "pic2": "./images/no-photo.png",
    "pic3": "./images/cityofsurrey/Large Mug.JPG",
    "pic4": "./images/cityofsurrey/Surrey Coin.JPG",
    "description": "As an engineer at Notifai; a company making enterprise enviromental and air quality sensing solutions. All of the apps and websites I made for our air quality devices required getting data from our GraphQL server, to do this in Angular I used Apollo GraphQL packages. I also practiced making a server to understand GraphQL more. When I was uing a Rasberry PI to make a demo of our new device, and displaying the data on e-paper, I decided to use our real data which I needed to pull down from our GraphQL server, so I used a Python GraphQL library. ",
    "visible": true,
    "open": false,
    "position": 2
  },
    {
    "cell_id": 6,
    "title": "LoRa Basics stations setup ",
    "skills": "",
    "pic": "./images/programming/lora1.png",
    "pic2": "./images/no-photo.png",
    "pic3": "./images/cityofsurrey/Large Mug.JPG",
    "pic4": "./images/cityofsurrey/Surrey Coin.JPG",
    "description": "As an engineer at Notifai; a company making enterprise enviromental and air quality sensing solutions. For our new Gateway we decided to just have it register with the things network. To do this I setup a LoRa Basics Stations on our Rasberry Pi based Gateway, and modified the settings to suit our needs. Along with this I wrote additional scripts to send JSON over UART to our RGB LED display board.",
    "visible": true,
    "open": false,
    "position": 3
  },
  {
    "cell_id": 7,
    "title": "Product Program: Scent Diffuser",
    "skills": "Device(ESP8266 MCU), Program(C, HTML) Parts(Atomizer, LED)",
    "pic": "./images/programming/arduino1.png",
    "pic2": "./images/no-photo.png",
    "pic3": "./images/cityofsurrey/Large Mug.JPG",
    "pic4": "./images/cityofsurrey/Surrey Coin.JPG",
    "description": "While a student at Simon Fraser University I worked with a student startup to create a prototype for a app controller scent diffuser. I used and ESP8266 as the controller, this included creating a program so it could be set up as an AP and then recieve network info and flip to connect. Then in normal operation it could recieve REST API requests to control things like the lighting colour and control the diffuser turning on and off. To test this I initially made a simple HTML interface, and later another team member made the app ",
    "visible": true,
    "open": false,
    "position": 1
  },
  {
    "cell_id": 8,
    "title": "Product Program: Security Keypad(MPU Communication)",
    "skills": "Program(NodeJS, Shell, AWS IOT), Protocols(UART,SPI,I2C, MQTT), Devices(Linux Debian MPU) ",
    "pic": "./images/programming/aws1.png",
    "pic2": "./images/no-photo.png",
    "pic3": "./images/cityofsurrey/Large Mug.JPG",
    "pic4": "./images/cityofsurrey/Surrey Coin.JPG",
    "description": "During my time working for a new company called Plasmatic Technologies Inc.; a company that is making an internet connected home security system, I programmed the device to use various forms of communcication. To connect with our apps we used AWS IOT so that required using MQTT messages, we additionally used MQTT in sending data between our programs. UART was used to send information between the MPU and MCU, I2C and SPI were used to control sense and display for a capacitive touch screen and taught me how to make Linux drivers as well. All programs were using NodeJS on a Linux Debian OS.",
    "visible": true,
    "open": false,
    "position": 2
  }
  ,
  {
    "cell_id": 9,
    "title": "Product Program: Security Keypad(MPU Components)",
    "skills": "Devices(Linux Debian MPU), Program(NodeJS, Linux Debian, C, C++), Parts(LED(POV), LCD, Speaker) ",
    "pic": "./images/programming/nodejs1.png",
    "pic2": "./images/no-photo.png",
    "pic3": "./images/cityofsurrey/Large Mug.JPG",
    "pic4": "./images/cityofsurrey/Surrey Coin.JPG",
    "description": "During my time working for a new company called Plasmatic Technologies Inc.; a company that is making an internet connected home security system, there were several components that needed to be programmed in NodeJS. This included the speakers which use PWM and the LCD which has images sent to it using the framebuffer to send over SPI and serves a page made with ReactJS with Xserver. Multiple LEDs that needed to be ran only had a library in C, so I made a NodeJS addon using C/C++.",
    "visible": true,
    "open": false,
    "position": 3
  },
  {
    "cell_id": 10,
    "title": "Product Program: Security Keypad(MCU)",
    "skills": "Devices(TI MCU), Program(C) Parts(Capacitive Touch)  ",
    "pic": "./images/programming/ccs1.jpg",
    "pic2": "./images/no-photo.png",
    "pic3": "./images/cityofsurrey/Large Mug.JPG",
    "pic4": "./images/cityofsurrey/Surrey Coin.JPG",
    "description": "During my time working for a new company called Plasmatic Technologies Inc.; a company that is making an internet connected home security system, I programmed using Code Composer Studio (CCS) got a TI MCU. This MCU was specifically meant to work with capacitive touch buttons, so I programmed for these. I also programmed it to be able to brute force find the installer codes for security systems. For communication between the MCU and MPU we used UART so I programmed it to recieve the messages and interpret them to perform actions. ",
    "visible": true,
    "open": false,
    "position": 1
  },
  {
    "cell_id": 11,
    "title": "Side Project Program: Automatic Scoreboard",
    "skills": "Device(Arduino MCU), Program(C) Parts(LED(POV), IR) ",
    "pic": "./images/programming/arduino1.png",
    "pic2": "./images/no-photo.png",
    "pic3": "./images/cityofsurrey/Large Mug.JPG",
    "pic4": "./images/cityofsurrey/Surrey Coin.JPG",
    "description": "Early on in learning how to use microcontrollers I decided I wanted to try and build a table top hockey that had an automated scoreboard. To do this I used an Arduino 4-digit 7-segment a 1-digit 7-segment display and IR sensors to detect goals. In order to display all of the number on the displays I used a shift register for the 7-segments and programmed a loop of outputs for persistence of vision(POV) so that they could all be shown at the same time. This was programmed in the Arduino IDE .",
    "visible": true,
    "open": false,
    "position": 2
  },
  {
    "cell_id": 12,
    "title": "Side Project Program: Controllable and PID Pulley",
    "skills": "Device(TI MCU), Program(C), Parts(Motor Control(PWM, PID), IR Buttons)",
    "pic": "./images/programming/ccs1.jpg",
    "pic2": "./images/no-photo.png",
    "pic3": "./images/cityofsurrey/Large Mug.JPG",
    "pic4": "./images/cityofsurrey/Surrey Coin.JPG",
    "description": "For a course at SFU we had to complete project with a microcontroller(MCU) that had you use digital I/O, PWM, and a PID. There was the choice to use a setup that was prebuilt, but I chose to built a custom pulley machine. The TI Tiva Series MCU was what I used for this, but I also learned how to use HCS12 DragonBoard MCU. I used PWM for speed control, the digital I/Os for directional control through a motor controller, and programmed the PID make an object stop smoothly in the middle after finding both IR endstops. This was programmed in Code Composer Studio(CCS).",
    "visible": true,
    "open": false,
    "position": 3
  }
]
